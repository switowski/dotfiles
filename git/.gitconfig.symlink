[user]
    name = Sebastian Witowski
    email = witowski.sebastian@gmail.com

[alias]
    amend = commit --amend
    amendf = commit --amend --no-edit
    br = branch
    ci = commit
    co = checkout
    cp = cherry-pick
    d = diff
    ds = diff --staged
    l = log
    lg = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)â€” %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
    lp = log --pretty=oneline
    lnm = log --no-merges
    sa = stash apply
    sh = show
    ss = stash save
    st = status
    # Squash last N commits together
    # Usage: git squash N
    squash = "!f(){ \
        git reset --soft HEAD~${1} && \
        git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; \
    };f"
    # Ignore repeated git command, like in: '$ git git git status'
    # source http://caiustheory.com/git-git-git-git-git/
    git = !exec git
    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch.
    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge --ff-only pr/$1 && \
            git branch -D pr/$1; \
        fi \
    }; f"
    # Switch to PR (GitHub)
    # source https://nedbatchelder.com/blog/201407/fetching_github_pull_requests.html
    # usage: `git copr 1234` or `git copr 1234 upstream`
    copr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && \
                   git checkout pr/$1; }; f"
    # Switch to MR (GitLab)
    # source https://stackoverflow.com/questions/44992512/git-how-to-checkout-merge-request-locally-and-create-new-local-branch
    # usage: `git comr 1234` or `git comr 1234 upstream`
    comr = "!f() { git fetch -f ${2:-origin} merge-requests/$1/head:mr/$1 && \
                   git checkout mr/$1; }; f"
    pushf = push --force-with-lease
    # Ignore or unignore some local files (https://stackoverflow.com/a/18317425)
    # usage: git ignore path-to-file-to-ignore
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[[:lower:]]"
    # Delete all local branches that has been merged
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    # List aliases
    aliases = config --get-regexp alias
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    # List all merge requests - works for GitLab for now
    lmr = !echo "Remember to run 'git fetch' first!" && git branch -a --list "*merge-request*"
    # Remove given commit from current branch (reverse of cherry-pick)
    # Usage: git cherry-remove SHA
    cherry-remove = "!f() { git rebase --onto ${1}^ ${1}; }; f"

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow
    frag = magenta bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse
    # Bold cyan color is used for code that was moved

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[credential]
    helper = cache --timeout=28800 # 8 hours

[core]
    editor = vim
    excludesfile = ~/.gitignore
    # diff tool that will be used is difft, configured under [diff]->external line 
    pager = delta #--diff-so-fancy
    # Configure Git on OS X to properly handle line endings
    # Removed because of: https://www.reddit.com/r/programming/comments/afjilq/how_to_nicely_set_up_the_gitconfig_file/edzoat8
    #autocrlf = input

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true  # use n and N to move between diff sections

[push]
	default = current

[diff]
    colorMoved = default
	external = difft

[merge]
    conflictstyle = diff3

[difftool "default-difftool"]
    cmd = code --wait --diff $LOCAL $REMOTE
[url "https://github.com/"]
	insteadOf = git://github.com/
