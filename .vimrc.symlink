" Sources of the vimrc inspirations:
" Harris
" Esteban
" http://dougblack.io/words/a-good-vimrc.html
" https://github.com/amix/vimrc

" =============== General =============== {{{
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible      " We're running Vim, not Vi!

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Custom leader key
let mapleader = "\<Space>"

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread
" }}}


" =============== Vim-plug plugins =============== {{{
" Automatic install of vim-plug if not exists
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
" To install or update plugins :PlugUpdate
call plug#begin('~/.vim/plugged')
" Gruvbox theme
Plug 'morhetz/gruvbox'
" Allows you to use <Tab> for all your insert completion needs
Plug 'ervandew/supertab'
" Adjusts the shiftwidth and expandtab based on current file
Plug 'tpope/vim-sleuth'
" Fuzzy file, buffer, mru, tag, etc. finder
Plug 'kien/ctrlp.vim'
" Nice bottom bar
Plug 'bling/vim-airline'
" All about surroundings: parentheses, brackets, quotes, XML tags
Plug 'tpope/vim-surround'
" Git gutter for vim
Plug 'airblade/vim-gitgutter'
" Puppet linter
Plug 'rodjek/vim-puppet'
" Plugin for fish syntax
Plug 'dag/vim-fish'
" Plugin to manage Most Recently Used (MRU) files. This plugin can be opened with <leader+f>
Plug 'vim-scripts/mru.vim'
" Comment stuff out. Use gcc to comment out a line (takes a count), gc to comment out the target of a motion. gcu uncomments a set of adjacent commented lines
Plug 'tpope/vim-commentary'
" Syntax and lint checking for vim (async). Requires Vim 8
Plug 'w0rp/ale'
" Used to display tags in the vim-airline
Plug 'majutsushi/tagbar'
" Show indented lines
Plug 'Yggdroot/indentLine'


" Initialize plugin system
call plug#end()
" }}}

" =============== Plugins settings =================== {{{
" ==== ctrlp ====
" overcome limit imposed by max height
let g:ctrlp_match_window = 'results:100'

" ==== vim-airline ====
" Always show the airline
set laststatus=2
" Enable ALE
" Set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1
" No idea how I got those settings, but let them stay
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#tagbar#flags = 'f'  " show full tag hierarchy
" }}}


" =============== Tmux =================== {{{
" FOR NOW DISABLED AS I DON'T USE TMUX
" allows cursor change in tmux mode
" if exists('$TMUX')
"     let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
"     let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
" else
"     let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"     let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" endif
" }}}


" =============== Colors and fonts =============== {{{
syntax enable    " enable syntax highlighting

" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
endif

try
    colorscheme gruvbox
catch
endtry

set background=dark " Setting dark mode

" Set utf8 as standard encoding
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Set ruler on column 80
" https://vi.stackexchange.com/questions/356/how-can-i-set-up-a-ruler-at-a-specific-column
set colorcolumn=80
highlight ColorColumn ctermbg=8 guibg=lightgrey

" }}}


" =============== Spaces and tabs =============== {{{
set expandtab           " Use spaces instead of tabs
set smarttab            " Be smart about tabs"

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

set smartindent
set autoindent

set linebreak    "Wrap lines at convenient points

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·
" }}}


" =============== UI Layout ================ {{{
set number                      " display line numbers
set wildmenu                    " visual autocomplete for command menu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Don't redraw while executing macros (good performance config)
set lazyredraw

set showmatch                   " Higlight matching parenthesis
set cursorline                  "Line to indicate the cursor location
set clipboard=unnamed           " Needed for MacOS clipboard sharing
set history=1000                "Store lots of :cmdline history
set gcr=a:blinkon0              "Disable cursor blink

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Configure backspace so it acts as it should act
set backspace=eol,start,indent

" Ignore case when searching ...
set ignorecase
" .. but when you search for uppercase term, it will still be case-sensitive
set smartcase

set incsearch           " search as characters are entered
set hlsearch            " Highlight search results

" }}}


" ================ Scrolling ======================== {{{
" Keep last 10 lines visible when scrolling
set scrolloff=10
set sidescrolloff=15
set sidescroll=1
" Disabled relative numbers - apparently they make Vim slow and I don't use it
" anyway
" set relativenumber              "Line number relative to cursor position
" }}}




" ================ Folding ======================== {{{
set foldlevelstart=10   " open most folds by default
set foldmethod=indent   "fold based on indent
set foldnestmax=10       "deepest fold is 3 levels
set nofoldenable        "don't fold by default
" }}}


" ================ Commands ======================== {{{
" Allow saving of files as sudo when I forgot to start vim using sudo.
command W w !sudo tee % > /dev/null

" Treat :Q as :q - common mistake
command! -bang Q q<bang>

" Remove all trailing spaces
command Fixspaces :%s/\s\+$//e
" }}}

" ================ Shortcuts ======================== {{{
" Pressing <leader>s will toggle and untoggle spell checking
map <leader>s :setlocal spell!<cr>

" List open buffers and then select buffer number to switch
nnoremap <leader>b :buffers<CR>:buffer<Space>
" Move between buffers quickly
map [b :bn<cr>
map ]b :bp<cr>

" Toogle relative/nonrelative line numbers
nnoremap <leader>l :set norelativenumber!<CR>

" Toogle line numbers
nnoremap <leader>n :set invnumber<CR>

" Press F2 or <leader>pp to toogle paste mode
set pastetoggle=<F2>
map <leader>pp :setlocal paste!<cr>

" Press // when selected some text in visual mode to find next occurence of this text
vnoremap // y/<C-R>"<CR>

" Turn off search highlight with double space
nnoremap <leader><space> :nohlsearch<CR>

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" Open MRU.vim to see the most recent files
map <leader>f :MRU<CR>

" Fast save of a buffer
nmap <leader>w :w!<cr>

" Python - comment/uncomment a block of selected text
" # to comment
vnoremap <silent> # :s/^/#/<cr>:noh<cr>
" -# to comment
vnoremap <silent> -# :s/^#//<cr>:noh<cr>

" }}}


" ================= Commit messages ================ {{{
" Commit message - max 72 chars
au FileType gitcommit set tw=72

" Remove asterisk from automatic word wrapping in commit messages
set comments=fb:*
" }}}


" ================ Persistent Undo ================== {{{
" Keep undo history across sessions, by storing in file.
" Requires making the directory:
" mkdir ~/.vim/undodir
set undofile " Maintain undo history between sessions
set undodir=~/.vim/undodir
" }}}


" ================ Spell checking ======================== {{{
set spell spelllang=en_us
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=red
"I want to start vim with spell-check disabled
set nospell
" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
" Fix spelling with <leader>sf
nnoremap <leader>sf 1z=
" }}}


" ================ Virtualenv ======================== {{{
" Add the virtualenv's site-packages to vim path
if has('python')
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF
endif
" }}}

" vim:foldmethod=marker:foldlevel=0
